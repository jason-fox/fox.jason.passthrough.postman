<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<?path2rootmap-uri ./?>
<topic id="fiware-persisting-context-data-using-nifi" specializations="@props/deliveryTarget">
  <title>FIWARE Persisting Context Data using NIFI</title>
  <body></body>
  <topic id="data-persistence" specializations="@props/deliveryTarget">
    <title>Data Persistence</title>
    <body>
      <p>"Plots within plots, but all roads lead down the dragon&#8217;s gullet."</p>
      <p>&#8212; George R.R. Martin (A Dance With Dragons)</p>
      <p>Previous tutorials have introduced a set of IoT Sensors (providing measurements of the
state of the real world), and two FIWARE Components - the
        <b>Orion Context Broker</b>and an
        <b>IoT Agent</b>.
This tutorial will introduct a new data persistance component - FIWARE
        <b>Draco</b>.</p>
      <p>The system so far has been built up to handle the current context, in other words it holds the data entities
defining the state of the real-world objects at a given moment in time.</p>
      <p>From this definition you can see - context is only interested in the
        <b>current</b>state of the system
It is not the responsibility of any of the existing components to report on the historical state of the system,
the context is based on the last measurement each sensor has sent data to the context broker.</p>
      <p>In order to do this, we will need to extend the existing architecture to persist changes of state into a database whenever
the context is updated.</p>
      <p>Persisting historical context data is useful for big data analysis - it can be used to discover trends, or data
can be sampled and aggregated to remove the influence of outlying data measurements. However within each Smart Solution,
the significance of each entity type will differ and entities and attributes may need to be sampled at different rates.</p>
      <p>Since the business requirements for using context data differ from application to appliation, there is no one standard use
case for historical data persistence - each situation is unique - it is not the case that one size fits all.
Therefore rather than overloading the context broker with the job of historical context data persistence, this role has been
separated out into a separate, highly configurable component -
        <b>Draco</b>.</p>
      <p>As you would expect,
        <b>Draco</b>, as part of an Open Source platform, is technology agnostic regarding the database
to be used for data persistance. The database you choose to use will depend upon your own business needs.</p>
      <p>However there is a cost to offering this flexibility - each part of the system must be separately configured and
notifications must be set up to only pass the minimal data required as necessary.</p>
    </body>
    <topic id="device-monitor" specializations="@props/deliveryTarget">
      <title>Device Monitor</title>
      <body>
        <p>For the purpose of this tutorial, a series of dummy IoT devices have been created, which will be attached to the context broker.
The state of each device can be seen on the UltraLight device monitor web-page found at:
          <codeph>http://localhost:3000/device/monitor</codeph>
        </p>
        <fig>
          <title>FIWARE Monitor</title>
          <image href="https://fiware.github.io/tutorials.Historic-Context-NIFI/img/device-monitor.png" scalefit="yes" scope="external">
            <alt>fig:</alt>
          </image>
        </fig>
      </body>
    </topic>
  </topic>
  <topic id="architecture" specializations="@props/deliveryTarget">
    <title>Architecture</title>
    <body>
      <p>This application builds on the components and dummy IoT devices created in
        <xref format="html" href="https://github.com/fiware/tutorials.iot-agent/" scope="external">previous tutorials</xref>. It will make use of three FIWARE components -
the
        <xref format="html" href="https://fiware-orion.readthedocs.io/en/latest/" scope="external">Orion Context Broker</xref>, the
        <xref format="html" href="http://fiware-iotagent-ul.readthedocs.io/en/latest/" scope="external">IoT Agent for UltraLight 2.0</xref>and introduce the
        <xref format="html" href="http://fiware-draco.readthedocs.io/en/latest/" scope="external">Draco Generic Enabler</xref>for persisting context data to a database.
Additional databases are now involved - both the Orion Context Broker and the IoT Agent rely on
        <xref format="html" href="https://www.mongodb.com/" scope="external">MongoDB</xref>technology to keep persistence of the information they hold, and we will be persisting our historical context data another database - either
        <b>MySQL</b>,
        <b>PostgreSQL</b>or
        <b>Mongo-DB</b>database.</p>
      <p>Therefore the overall architecture will consist of the following elements:</p>
      <ul>
        <li>The FIWARE
          <xref format="html" href="https://fiware-orion.readthedocs.io/en/latest/" scope="external">Orion Context Broker</xref>which will receive requests using
          <xref format="html" href="https://fiware.github.io/specifications/openapi/ngsiv2" scope="external">NGSI</xref>
        </li>
        <li>The FIWARE
          <xref format="html" href="http://fiware-iotagent-ul.readthedocs.io/en/latest/" scope="external">IoT Agent for UltraLight 2.0</xref>which will receive southbound requests
using
          <xref format="html" href="https://fiware.github.io/specifications/openapi/ngsiv2" scope="external">NGSI</xref>and convert them to
          <xref format="html" href="http://fiware-iotagent-ul.readthedocs.io/en/latest/usermanual/index.html#user-programmers-manual" scope="external">UltraLight 2.0</xref>commands for
the devices</li>
        <li>FIWARE
          <xref format="html" href="http://fiware-draco.readthedocs.io/en/latest/" scope="external">Draco</xref>which will subscribe to context changes and persist them into a database (
          <b>MySQL</b>,
          <b>PostgreSQL</b>or
          <b>Mongo-DB</b>)</li>
      </ul>
      <ul>
        <li>Used by the
          <b>Orion Context Broker</b>to hold context data information such as data entities, subscriptions and registrations</li>
        <li>Used by the
          <b>IoT Agent</b>to hold device information such as device URLs and Keys</li>
        <li>Potentially used as a data sink to hold historical context data.</li>
      </ul>
      <ul>
        <li>Potentially used as a data sink to hold historical context data.</li>
      </ul>
      <ul>
        <li>Potentially used as a data sink to hold historical context data.</li>
      </ul>
      <ul>
        <li>The underlying
          <xref format="html" href="https://www.mongodb.com/" scope="external">MongoDB</xref>database :</li>
        <li>An additional
          <xref format="html" href="https://www.postgresql.org/" scope="external">PostgreSQL</xref>database :</li>
        <li>An additional
          <xref format="html" href="https://www.mysql.com/" scope="external">MySQL</xref>database :</li>
      </ul>
      <ul>
        <li>Display store information and allow users to interact with the dummy IoT devices</li>
        <li>Show which products can be bought at each store</li>
        <li>Allow users to "buy" products and reduce the stock count.</li>
      </ul>
      <ul>
        <li>receive requests using
          <xref format="html" href="https://fiware.github.io/specifications/openapi/ngsiv2" scope="external">NGSI</xref>
        </li>
        <li>makes requests to publicly available data sources using their own APIs in a proprietory format</li>
        <li>returns context data back to the Orion Context Broker in
          <xref format="html" href="https://fiware.github.io/specifications/openapi/ngsiv2" scope="external">NGSI</xref>format.</li>
      </ul>
      <ul>
        <li>The
          <b>Stock Management Frontend</b>is not used in this tutorial. It does the following:</li>
        <li>A webserver acting as set of
          <xref format="html" href="https://github.com/fiware/tutorials.iot-sensors" scope="external">dummy IoT devices</xref>using the
          <xref format="html" href="http://fiware-iotagent-ul.readthedocs.io/en/latest/usermanual/index.html#user-programmers-manual" scope="external">UltraLight 2.0</xref>protocol running over HTTP.</li>
        <li>The
          <b>Context Provider NGSI</b>proxy is not used in this tutorial. It does the following:</li>
      </ul>
      <ul>
        <li>Three
          <b>FIWARE Generic Enablers</b>:</li>
        <li>One, two or three of the following
          <b>Databases</b>:</li>
        <li>Three
          <b>Context Providers</b>:</li>
      </ul>
      <p>Since all interactions between the elements are initiated by HTTP requests, the entities can be containerized and run from exposed ports.</p>
      <p>The specific architecture of each section of the tutorial is discussed below.</p>
    </body>
  </topic>
  <topic id="start-up" specializations="@props/deliveryTarget">
    <title>Start Up</title>
    <body>
      <p>Before you start you should ensure that you have obtained or built the necessary Docker images locally. Please run</p>
      <codeblock outputclass="console">./services create</codeblock>
      <p>
        <b>Note</b>The
        <codeph>context-provider</codeph>image has not yet been pushed to Docker hub.
Failing to build the Docker sources before proceeding will result in the following error:</p>
      <codeblock>Pulling context-provider (fiware/cp-web-app:latest)...
ERROR: The image for the service you're trying to recreate has been removed.</codeblock>
      <p>Thereafter, all services can be initialised from the command line by running the
        <xref format="html" href="https://github.com/fiware/tutorials.historic-context/blob/master/services" scope="external">services</xref>Bash script provided within the repository:</p>
      <codeblock outputclass="console">./services &lt;command&gt;</codeblock>
      <p>Where
        <codeph>&lt;command&gt;</codeph>will vary depending upon the databases we wish to activate.
This command will also import seed data from the previous tutorials and provision the dummy IoT sensors on startup.</p>
      <p>:information_source:
        <b>Note:</b>If you want to clean up and start over again you can do so with the following command:</p>
      <codeblock outputclass="console">./services stop</codeblock>
    </body>
  </topic>
  <topic id="mongo-db---persisting-context" specializations="@props/deliveryTarget">
    <title>Mongo DB - Persisting Context</title>
    <body>
      <p>Persisting historic context data using MongoDB technology is relatively simple to configure since we are already using a
MongoDB instance to hold data related to the Orion Context Broker and the IoT Agent. The MongoDB instance is listening
on the standard
        <codeph>27017</codeph>port and the overall architecture can be seen below:</p>
      <fig>
        <title></title>
        <image href="https://fiware.github.io/tutorials.Historic-Context-NIFI/img/mongo-draco-tutorial.png" scalefit="yes" scope="external">
          <alt></alt>
        </image>
      </fig>
      <section id="mongodb---database-server-configuration" outputclass="section">
        <title>MongoDB - Database Server Configuration</title>
        <codeblock outputclass="yaml">mongo-db:
    image: mongo:3.6
    hostname: mongo-db
    container_name: db-mongo
    ports:
        - "27017:27017"
    networks:
        - default
    command: --bind_ip_all --smallfiles</codeblock>
      </section>
      <section id="mongodb---draco-configuration" outputclass="section">
        <title>MongoDB - Draco Configuration</title>
        <codeblock outputclass="yaml">draco:
    image: ging/fiware-draco:1.1.0
    container_name: draco
    depends_on:
        - mongo-db
    environment:
        - NIFI_WEB_HTTP_PORT=9090
    ports:
        - "9090:9090"
        - "5050:5050"
    healthcheck:
        test: curl --fail -s http://localhost:9090/nifi-api/system-diagnostics || exit 1</codeblock>
        <p>The
          <codeph>draco</codeph>container is listening on two ports:</p>
        <ul>
          <li>The Subscription Port for Draco -
            <codeph>5050</codeph>is where the service will be listening for notifications from the Orion
context broker</li>
          <li>The Web interface for Draco -
            <codeph>9090</codeph>is exposed purely for configuring the processors</li>
        </ul>
      </section>
      <section id="mongodb---start-up" outputclass="section">
        <title>MongoDB - Start up</title>
        <p>To start the system with a
          <b>MongoDB</b>database only, run the following command:</p>
        <codeblock outputclass="console">./services mongodb</codeblock>
        <p>Then go to your browser and open Draco using this URL
          <codeph>http://localhost:9090/nifi</codeph>
        </p>
        <p>Now go to the Components toolbar which is placed in the upper section of the NiFi GUI, find the template icon and drag
and drop it inside the Draco user space. At this point, a popup should be displayed with a list of all the templates
available. Please select the template MONGO-TUTORIAL.</p>
        <fig>
          <title></title>
          <image href="https://fiware.github.io/tutorials.Historic-Context-NIFI/img/mongo-tutorial-template.png" scalefit="yes" scope="external">
            <alt></alt>
          </image>
        </fig>
        <p>Select all the processors (press shift and click on every processor) and start them by clicking on the start button.
Now, you can see that the status icon of each processor turned from red to green.</p>
      </section>
      <section id="generating-context-data" outputclass="section">
        <title>Generating Context Data</title>
        <p>For the purpose of this tutorial, we must be monitoring a system where the context is periodically being updated.
The dummy IoT Sensors can be used to do this. Open the device monitor page at
          <codeph>http://localhost:3000/device/monitor</codeph>and unlock a
          <b>Smart Door</b>and switch on a
          <b>Smart Lamp</b>. This can be done by selecting an appropriate the command
from the drop down list and pressing the
          <codeph>send</codeph>button. The stream of measurements coming from the devices can then
be seen on the same page:</p>
        <p>
          <image href="https://fiware.github.io/tutorials.Historic-Context/img/door-open.gif" scalefit="yes" scope="external">
            <alt></alt>
          </image>## Draco - Check System Health { .swagger-GET}</p>
        <codeblock outputclass="swagger-get">GET http://{{draco}}/nifi-api/system-diagnostics</codeblock>
        <p>Once Draco is running, you can check the status by making an HTTP request to the exposed draco port to
          <codeph>/nifi-api/system-diagnostics</codeph>. If the response is blank, this is usually because Draco is not running or is listening on another port.</p>
      </section>
      <section id="body" outputclass="section">
        <title>Body</title>
        <codeblock outputclass="markup"></codeblock>
      </section>
      <example id="example-request" outputclass="example">
        <title>Example Request</title>
        <codeblock outputclass="bash">curl -X GET  \
  'http://{{draco}}/nifi-api/system-diagnostics'  \
    -d ''</codeblock>
      </example>
    </body>
    <topic id="orion---subscribe-to-context-changes" outputclass="swagger-post" specializations="@props/deliveryTarget">
      <title>Orion - Subscribe to Context Changes</title>
      <body>
        <codeblock outputclass="swagger-post">POST http://{{orion}}/v2/subscriptions/</codeblock>
        <p>Once a dynamic context system is up and running, we need to inform
          <b>Draco</b>of changes in context.</p>
        <p>This is done by making a POST request to the
          <codeph>/v2/subscription</codeph>endpoint of the Orion Context Broker.</p>
        <ul>
          <li>The
            <codeph>fiware-service</codeph>and
            <codeph>fiware-servicepath</codeph>headers are used to filter the subscription to only listen to measurements from the attached IoT Sensors</li>
          <li>The
            <codeph>idPattern</codeph>in the request body ensures that Draco will be informed of all context data changes.</li>
          <li>The notification
            <codeph>url</codeph>must match the configured
            <codeph>NIFI_WEB_HTTP_PORT</codeph>and the URL the sync is listening on (usually
            <codeph>/v2/notify</codeph>)</li>
          <li>The
            <codeph>throttling</codeph>value defines the rate that changes are sampled.</li>
        </ul>
        <p>As you can see, the database used to persist context data has no impact on the details of the subscription. It is the same for each database.</p>
        <section id="headers" outputclass="section">
          <title>Headers</title>
          <table>
            <tgroup cols="3">
              <colspec colname="col1" colnum="1"></colspec>
              <colspec colname="col2" colnum="2"></colspec>
              <colspec colname="col3" colnum="3"></colspec>
              <thead>
                <row>
                  <entry align="left" colname="col1">Key</entry>
                  <entry align="left" colname="col2">Value</entry>
                  <entry align="left" colname="col3">Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry align="left" colname="col1">Content-Type</entry>
                  <entry align="left" colname="col2">application/json</entry>
                  <entry align="left" colname="col3"></entry>
                </row>
                <row>
                  <entry align="left" colname="col1">fiware-service</entry>
                  <entry align="left" colname="col2">openiot</entry>
                  <entry align="left" colname="col3"></entry>
                </row>
                <row>
                  <entry align="left" colname="col1">fiware-servicepath</entry>
                  <entry align="left" colname="col2">/</entry>
                  <entry align="left" colname="col3"></entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </section>
        <section id="body-1" outputclass="section">
          <title>Body</title>
          <codeblock outputclass="json">{
  "description": "Notify Draco of all context changes",
  "subject": {
    "entities": [
      {
        "idPattern": ".*"
      }
    ]
  },
  "notification": {
    "http": {
      "url": "http://draco:5050/v2/notify"
    }
  },
  "throttling": 5
}</codeblock>
        </section>
        <example id="example-request-1" outputclass="example">
          <title>Example Request</title>
          <codeblock outputclass="bash">curl -X POST  \
  'http://{{orion}}/v2/subscriptions/'  \
    -H Content-Type :  application/json  \
    -H fiware-service :  openiot  \
    -H fiware-servicepath :  /  \
    -d '{
  "description": "Notify Draco of all context changes",
  "subject": {
    "entities": [
      {
        "idPattern": ".*"
      }
    ]
  },
  "notification": {
    "http": {
      "url": "http://draco:5050/v2/notify"
    }
  },
  "throttling": 5
}'</codeblock>
        </example>
      </body>
    </topic>
    <topic id="orion---check-subscription-is-working" outputclass="swagger-get" specializations="@props/deliveryTarget">
      <title>Orion - Check Subscription is working</title>
      <body>
        <codeblock outputclass="swagger-get">GET http://{{orion}}/v2/subscriptions/</codeblock>
        <p>If a subscription has been created, you can check to see if it is firing by making a GET
request to the
          <codeph>/v2/subscriptions</codeph>endpoint.</p>
        <p>Within the
          <codeph>notification</codeph>section of the response, you can see several additional
          <codeph>attributes</codeph>which describe the health of the subscription</p>
        <p>If the criteria of the subscription have been met,
          <codeph>timesSent</codeph>should be greater than
          <codeph>0</codeph>.
A zero value would indicate that the
          <codeph>subject</codeph>of the subscription is incorrect or the subscription
has created with the wrong
          <codeph>fiware-service-path</codeph>or
          <codeph>fiware-service</codeph>header</p>
        <p>The
          <codeph>lastNotification</codeph>should be a recent timestamp - if this is not the case, then the devices
are not regularly sending data. Remember to unlock the
          <b>Smart Door</b>and switch on the
          <b>Smart Lamp</b>
        </p>
        <p>The
          <codeph>lastSuccess</codeph>should match the
          <codeph>lastNotification</codeph>date - if this is not the case
then
          <b>Draco</b>is not receiving the subscription properly. Check that the host name
and port are correct.</p>
        <p>Finally, check that the
          <codeph>status</codeph>of the subscription is
          <codeph>active</codeph>- an expired subscription
will not fire.</p>
        <section id="headers-1" outputclass="section">
          <title>Headers</title>
          <table>
            <tgroup cols="3">
              <colspec colname="col1" colnum="1"></colspec>
              <colspec colname="col2" colnum="2"></colspec>
              <colspec colname="col3" colnum="3"></colspec>
              <thead>
                <row>
                  <entry align="left" colname="col1">Key</entry>
                  <entry align="left" colname="col2">Value</entry>
                  <entry align="left" colname="col3">Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry align="left" colname="col1">fiware-service</entry>
                  <entry align="left" colname="col2">openiot</entry>
                  <entry align="left" colname="col3"></entry>
                </row>
                <row>
                  <entry align="left" colname="col1">fiware-servicepath</entry>
                  <entry align="left" colname="col2">/</entry>
                  <entry align="left" colname="col3"></entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </section>
        <section id="body-2" outputclass="section">
          <title>Body</title>
          <codeblock outputclass="markup"></codeblock>
        </section>
        <example id="example-request-2" outputclass="example">
          <title>Example Request</title>
          <codeblock outputclass="bash">curl -X GET  \
  'http://{{orion}}/v2/subscriptions/'  \
    -H fiware-service :  openiot  \
    -H fiware-servicepath :  /  \
    -d ''</codeblock>
        </example>
      </body>
    </topic>
  </topic>
  <topic id="mongo-db---reading-data" specializations="@props/deliveryTarget">
    <title>Mongo DB - Reading Data</title>
    <body>
      <p>To read mongo-db data from the command line, we will need access to the
        <codeph>mongo</codeph>tool run an interactive instance
of the
        <codeph>mongo</codeph>image as shown to obtain a command line prompt:</p>
      <codeblock outputclass="console">docker run -it --network fiware_default  --entrypoint /bin/bash mongo</codeblock>
      <p>You can then log into to the running
        <codeph>mongo-db</codeph>database by using the command line as shown:</p>
      <codeblock outputclass="bash">mongo --host mongo-db</codeblock>
      <section id="show-available-databases-on-the-mongodb-server" outputclass="section">
        <title>Show Available Databases on the MongoDB server</title>
        <p>To show the list of available databases, run the statement as shown:</p>
      </section>
      <section id="query" outputclass="section">
        <title>Query:</title>
        <codeblock>show dbs</codeblock>
      </section>
      <section id="result" outputclass="section">
        <title>Result:</title>
        <codeblock>admin          0.000GB
iotagentul     0.000GB
local          0.000GB
orion          0.000GB
orion-openiot  0.000GB
sth_openiot    0.000GB</codeblock>
        <p>The result include two databases
          <codeph>admin</codeph>and
          <codeph>local</codeph>which are set up by default by
          <b>MongoDB</b>, along with four databases
created by the FIWARE platform. The Orion Context Broker has created two separate database instance for each
          <codeph>fiware-service</codeph>- the Store enitities were created without defining a
          <codeph>fiware-service</codeph>and therefore are held within the
          <codeph>orion</codeph>database,
whereas the IoT device entities were created using the
          <codeph>openiot</codeph>
          <codeph>fiware-service</codeph>header and are held separately. The IoT Agent was intialized to hold the IoT sensor data in a separate
          <b>MongoDB</b>database called
          <codeph>iotagentul</codeph>.</p>
        <p>As a result of the subscription of Draco to Orion Context Broker, a new database has been created called
          <codeph>sth_openiot</codeph>. The default value for a
          <b>Mongo DB</b>database holding historic context consists of the
          <codeph>sth_</codeph>prefix followed by the
          <codeph>fiware-service</codeph>header - therefore
          <codeph>sth_openiot</codeph>holds the historic context of the IoT devices.</p>
      </section>
      <section id="read-historical-context-from-the-mongodb-server" outputclass="section">
        <title>Read Historical Context from the MongoDB server</title>
      </section>
      <section id="query-1" outputclass="section">
        <title>Query:</title>
        <codeblock>use sth_openiot
show collections</codeblock>
      </section>
      <section id="result-1" outputclass="section">
        <title>Result:</title>
        <codeblock>switched to db sth_openiot

sth_/_Door:001_Door
sth_/_Door:001_Door.aggr
sth_/_Lamp:001_Lamp
sth_/_Lamp:001_Lamp.aggr
sth_/_Motion:001_Motion
sth_/_Motion:001_Motion.aggr</codeblock>
        <p>Looking within the
          <codeph>sth_openiot</codeph>you will see that a series of tables have been created. The names of each table consist
of the
          <codeph>sth_</codeph>prefix followed by the
          <codeph>fiware-servicepath</codeph>header followed by the entity id. Two table are created for
each entity - the
          <codeph>.aggr</codeph>table holds some aggregated data which will be accessed in a later tutorial. The raw data
can be seen in the tables without the
          <codeph>.aggr</codeph>suffix.</p>
        <p>The historical data can be seen by looking at the data within each table, by default each row will contain the sampled value of a single attribute.</p>
      </section>
      <section id="query-2" outputclass="section">
        <title>Query:</title>
        <codeblock>db["sth_/_Door:001_Door"].find().limit(10)</codeblock>
      </section>
      <section id="result-2" outputclass="section">
        <title>Result:</title>
        <codeblock>{ "_id" : ObjectId("5b1fa48630c49e0012f7635d"), "recvTime" : ISODate("2018-06-12T10:46:30.897Z"), "attrName" : "TimeInstant", "attrType" : "ISO8601", "attrValue" : "2018-06-12T10:46:30.836Z" }
{ "_id" : ObjectId("5b1fa48630c49e0012f7635e"), "recvTime" : ISODate("2018-06-12T10:46:30.897Z"), "attrName" : "close_status", "attrType" : "commandStatus", "attrValue" : "UNKNOWN" }
{ "_id" : ObjectId("5b1fa48630c49e0012f7635f"), "recvTime" : ISODate("2018-06-12T10:46:30.897Z"), "attrName" : "lock_status", "attrType" : "commandStatus", "attrValue" : "UNKNOWN" }
{ "_id" : ObjectId("5b1fa48630c49e0012f76360"), "recvTime" : ISODate("2018-06-12T10:46:30.897Z"), "attrName" : "open_status", "attrType" : "commandStatus", "attrValue" : "UNKNOWN" }
{ "_id" : ObjectId("5b1fa48630c49e0012f76361"), "recvTime" : ISODate("2018-06-12T10:46:30.836Z"), "attrName" : "refStore", "attrType" : "Relationship", "attrValue" : "Store:001" }
{ "_id" : ObjectId("5b1fa48630c49e0012f76362"), "recvTime" : ISODate("2018-06-12T10:46:30.836Z"), "attrName" : "state", "attrType" : "Text", "attrValue" : "CLOSED" }
{ "_id" : ObjectId("5b1fa48630c49e0012f76363"), "recvTime" : ISODate("2018-06-12T10:45:26.368Z"), "attrName" : "unlock_info", "attrType" : "commandResult", "attrValue" : " unlock OK" }
{ "_id" : ObjectId("5b1fa48630c49e0012f76364"), "recvTime" : ISODate("2018-06-12T10:45:26.368Z"), "attrName" : "unlock_status", "attrType" : "commandStatus", "attrValue" : "OK" }
{ "_id" : ObjectId("5b1fa4c030c49e0012f76385"), "recvTime" : ISODate("2018-06-12T10:47:28.081Z"), "attrName" : "TimeInstant", "attrType" : "ISO8601", "attrValue" : "2018-06-12T10:47:28.038Z" }
{ "_id" : ObjectId("5b1fa4c030c49e0012f76386"), "recvTime" : ISODate("2018-06-12T10:47:28.081Z"), "attrName" : "close_status", "attrType" : "commandStatus", "attrValue" : "UNKNOWN" }</codeblock>
        <p>The usual
          <b>Mongo-DB</b>query syntax can be used to filter appropriate fields and values. For example to read the rate at which the
          <b>Motion Sensor</b>with the
          <codeph>id=Motion:001_Motion</codeph>is accumulating, you would make a query as follows:</p>
      </section>
      <section id="query-3" outputclass="section">
        <title>Query:</title>
        <codeblock>db["sth_/_Motion:001_Motion"].find({attrName: "count"},{_id: 0, attrType: 0, attrName: 0 } ).limit(10)</codeblock>
      </section>
      <section id="result-3" outputclass="section">
        <title>Result:</title>
        <codeblock>{ "recvTime" : ISODate("2018-06-12T10:46:18.756Z"), "attrValue" : "8" }
{ "recvTime" : ISODate("2018-06-12T10:46:36.881Z"), "attrValue" : "10" }
{ "recvTime" : ISODate("2018-06-12T10:46:42.947Z"), "attrValue" : "11" }
{ "recvTime" : ISODate("2018-06-12T10:46:54.893Z"), "attrValue" : "13" }
{ "recvTime" : ISODate("2018-06-12T10:47:00.929Z"), "attrValue" : "15" }
{ "recvTime" : ISODate("2018-06-12T10:47:06.954Z"), "attrValue" : "17" }
{ "recvTime" : ISODate("2018-06-12T10:47:15.983Z"), "attrValue" : "19" }
{ "recvTime" : ISODate("2018-06-12T10:47:49.090Z"), "attrValue" : "23" }
{ "recvTime" : ISODate("2018-06-12T10:47:58.112Z"), "attrValue" : "25" }
{ "recvTime" : ISODate("2018-06-12T10:48:28.218Z"), "attrValue" : "29" }</codeblock>
        <p>To leave the MongoDB client and leave interactive mode, run the following:</p>
        <codeblock outputclass="console">exit</codeblock>
        <codeblock outputclass="console">exit</codeblock>
      </section>
    </body>
  </topic>
  <topic id="postgresql---persisting-context" specializations="@props/deliveryTarget">
    <title>PostgreSQL - Persisting Context</title>
    <body>
      <p>To persist historic context data into an alternative database such as
        <b>PostgreSQL</b>, we will need an additional
container which hosts the PostgreSQL server - the default Docker image for this data can be used. The PostgreSQL
instance is listening on the standard
        <codeph>5432</codeph>port and the overall architecture can be seen below:</p>
      <fig>
        <title></title>
        <image href="https://fiware.github.io/tutorials.Historic-Context-NIFI/img/postgres-draco-tutorial.png" scalefit="yes" scope="external">
          <alt></alt>
        </image>
      </fig>
      <p>We now have a system with two databases, since the MongoDB container is still required to hold data related to the Orion
Context Broker and the IoT Agent.</p>
      <section id="postgresql---database-server-configuration" outputclass="section">
        <title>PostgreSQL - Database Server Configuration</title>
        <codeblock outputclass="yaml">postgres-db:
    image: postgres:latest
    hostname: postgres-db
    container_name: db-postgres
    expose:
        - "5432"
    ports:
        - "5432:5432"
    networks:
        - default
    environment:
        - "POSTGRES_PASSWORD=password"
        - "POSTGRES_USER=postgres"
        - "POSTGRES_DB=postgres"</codeblock>
        <p>The
          <codeph>postgres-db</codeph>container is listening on a single port:</p>
        <ul>
          <li>Port
            <codeph>5432</codeph>is the default port for a PostgreSQL server. It has been exposed so you can also run the
            <codeph>pgAdmin4</codeph>tool
to display database data if you wish</li>
        </ul>
        <p>The
          <codeph>postgres-db</codeph>container is driven by environment variables as shown:</p>
        <table>
          <tgroup cols="3">
            <colspec colname="col1" colnum="1"></colspec>
            <colspec colname="col2" colnum="2"></colspec>
            <colspec colname="col3" colnum="3"></colspec>
            <thead>
              <row>
                <entry align="left" colname="col1">Key</entry>
                <entry align="left" colname="col2">Value.</entry>
                <entry align="left" colname="col3">Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry align="left" colname="col1">POSTGRES_PASSWORD</entry>
                <entry align="left" colname="col2">
                  <codeph>password</codeph>
                </entry>
                <entry align="left" colname="col3">Password for the PostgreSQL database user</entry>
              </row>
              <row>
                <entry align="left" colname="col1">POSTGRES_USER</entry>
                <entry align="left" colname="col2">
                  <codeph>postgres</codeph>
                </entry>
                <entry align="left" colname="col3">Username for the PostgreSQL database user</entry>
              </row>
              <row>
                <entry align="left" colname="col1">POSTGRES_DB</entry>
                <entry align="left" colname="col2">
                  <codeph>postgres</codeph>
                </entry>
                <entry align="left" colname="col3">The name of the PostgreSQL database</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <p>:information_source:
          <b>Note:</b>Passing the Username and Password in plain text environment variables like this is a
security risk. Whereas this is acceptable practice in a tutorial, for a production environment, you can avoid this
risk by applying
          <xref format="html" href="https://blog.docker.com/2017/02/docker-secrets-management/" scope="external">Docker Secrets</xref>
        </p>
      </section>
      <section id="postgresql---draco-configuration" outputclass="section">
        <title>PostgreSQL - Draco Configuration</title>
        <codeblock outputclass="yaml">draco:
    image: ging/fiware-draco:1.1.0
    container_name: draco
    depends_on:
        - postgres-db
    environment:
        - NIFI_WEB_HTTP_PORT=9090
    ports:
        - "9090:9090"
        - "5050:5050"
    healthcheck:
        test: curl --fail -s http://localhost:9090/nifi-api/system-diagnostics || exit 1</codeblock>
        <p>The
          <codeph>draco</codeph>container is listening on two ports:</p>
        <ul>
          <li>The Subscription Port for Draco -
            <codeph>5050</codeph>is where the service will be listening for notifications from the Orion
context broker</li>
          <li>The Web interface for Draco -
            <codeph>9090</codeph>is exposed purely for configuring the processors.</li>
        </ul>
      </section>
      <section id="postgresql---start-up" outputclass="section">
        <title>PostgreSQL - Start up</title>
        <p>To start the system with a
          <b>PostgreSQL</b>database run the following command:</p>
        <codeblock outputclass="console">./services postgres</codeblock>
        <p>Then go to your browser and open Draco using this URL
          <codeph>http://localhost:9090/nifi</codeph>
        </p>
        <p>Now go to the Components toolbar which is placed in the upper section of the NiFi GUI, find the template icon and drag
and drop it inside the Draco user space. At this point, a popup should be displayed with a list of all the templates
available. Please select the template POSTGRESQL-TUTORIAL.</p>
        <fig>
          <title></title>
          <image href="https://fiware.github.io/tutorials.Historic-Context-NIFI/img/postgres-tutorial-template.png" scalefit="yes" scope="external">
            <alt></alt>
          </image>
        </fig>
        <p>Before starting the processors, you need to set your PostgreSQL password and enable the DBCConnectionPool controller.
For doing that please follow the instructions:</p>
        <ol>
          <li>
            <p>Do right click on any part of the Draco GUI user space, and then click on configure.
              <image href="https://fiware.github.io/tutorials.Historic-Context-NIFI/img/step1.png" scalefit="yes" scope="external">
                <alt></alt>
              </image>
            </p>
          </li>
          <li>
            <p>Go to the Controller Services Tab, at this point a list of controllers should be displayed, locate the
DBCConnectionPool controller.</p>
          </li>
          <li>
            <p>Click on the configuration button of the "DBCPConnectionPool"
              <image href="https://fiware.github.io/tutorials.Historic-Context-NIFI/img/step2.png" scalefit="yes" scope="external">
                <alt></alt>
              </image>
            </p>
          </li>
          <li>
            <p>Go to the controller Properties tab and put "password" in the password field, then apply the changes.
              <image href="https://fiware.github.io/tutorials.Historic-Context-NIFI/img/controller-postgresql.png" scalefit="yes" scope="external">
                <alt></alt>
              </image>
            </p>
          </li>
          <li>
            <p>Enable the processor by clicking on the thunder icon and then click on enable, then close the controller
configuration page.</p>
          </li>
        </ol>
        <fig>
          <title></title>
          <image href="https://fiware.github.io/tutorials.Historic-Context-NIFI/img/step4.png" scalefit="yes" scope="external">
            <alt></alt>
          </image>
        </fig>
        <fig>
          <title></title>
          <image href="https://fiware.github.io/tutorials.Historic-Context-NIFI/img/step5.png" scalefit="yes" scope="external">
            <alt></alt>
          </image>
        </fig>
        <ol>
          <li>Select all the processors (press shift and click on every processor) and start them by clicking on the start button.
Now, you can see that the status icon of each processor turned from red to green.</li>
        </ol>
      </section>
      <section id="postgresql---start-up-1" outputclass="section">
        <title>PostgreSQL - Start up</title>
        <p>To start the system with a
          <b>PostgreSQL</b>database run the following command:</p>
        <codeblock outputclass="console">./services postgres</codeblock>
      </section>
      <section id="postgresql--database-server-configuration" outputclass="section">
        <title>PostgreSQL- Database Server Configuration</title>
        <codeblock outputclass="yaml">postgres-db:
      image: postgres:latest
      hostname: postgres-db
      container_name: db-postgres
      expose:
        - "5432"
      ports:
        - "5432:5432"
      networks:
        - default
      environment:
        - "POSTGRES_PASSWORD=password"
        - "POSTGRES_USER=postgres"
        - "POSTGRES_DB=postgres"</codeblock>
        <p>The
          <codeph>postgres-db</codeph>container is listening on a single port:</p>
        <ul>
          <li>Port
            <codeph>5432</codeph>is the default port for a PostgreSQL server. It has been exposed so you can also run the
            <codeph>pgAdmin4</codeph>tool to display database data if you wish</li>
        </ul>
        <p>The
          <codeph>postgres-db</codeph>container is driven by environment variables as shown:</p>
        <table>
          <tgroup cols="3">
            <colspec colname="col1" colnum="1"></colspec>
            <colspec colname="col2" colnum="2"></colspec>
            <colspec colname="col3" colnum="3"></colspec>
            <thead>
              <row>
                <entry align="left" colname="col1">Key</entry>
                <entry align="left" colname="col2">Value.</entry>
                <entry align="left" colname="col3">Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry align="left" colname="col1">POSTGRES_PASSWORD</entry>
                <entry align="left" colname="col2">
                  <codeph>password</codeph>
                </entry>
                <entry align="left" colname="col3">Password for the PostgreSQL database user</entry>
              </row>
              <row>
                <entry align="left" colname="col1">POSTGRES_USER</entry>
                <entry align="left" colname="col2">
                  <codeph>postgres</codeph>
                </entry>
                <entry align="left" colname="col3">Username for the PostgreSQL database user</entry>
              </row>
              <row>
                <entry align="left" colname="col1">POSTGRES_DB</entry>
                <entry align="left" colname="col2">
                  <codeph>postgres</codeph>
                </entry>
                <entry align="left" colname="col3">The name of the PostgreSQL database</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>
      <section id="postgresql---draco-configuration-1" outputclass="section">
        <title>PostgreSQL - Draco Configuration</title>
        <codeblock outputclass="yaml">draco:
    image: fiware/draco-ngsi:latest
    hostname: draco
    container_name: fiware-draco
    networks:
        - default
    depends_on:
        - postgres-db
    expose:
        - "5080"
    ports:
        - "5050:5050"
        - "5080:5080"
    environment:
        - "CYGNUS_POSTGRESQL_HOST=postgres-db"
        - "CYGNUS_POSTGRESQL_PORT=5432"
        - "CYGNUS_POSTGRESQL_USER=postgres" 
        - "CYGNUS_POSTGRESQL_PASS=password" 
        - "CYGNUS_LOG_LEVEL=DEBUG"
        - "CYGNUS_SERVICE_PORT=5050"
        - "CYGNUS_API_PORT=5080"
        - "CYGNUS_POSTGRESQL_ENABLE_CACHE=true"</codeblock>
        <p>The
          <codeph>draco</codeph>container is listening on two ports:</p>
        <ul>
          <li>The service will be listening on port
            <codeph>5050</codeph>for notifications from the Orion context broker</li>
          <li>Port
            <codeph>5080</codeph>is exposed purely for tutorial access - so that cUrl or Postman can make provisioning commands
without being part of the same network.</li>
        </ul>
      </section>
      <section id="generating-context-data-1" outputclass="section">
        <title>Generating Context Data</title>
        <p>For the purpose of this tutorial, we must be monitoring a system where the context is periodically being updated.
The dummy IoT Sensors can be used to do this. Open the device monitor page at
          <codeph>http://localhost:3000/device/monitor</codeph>and unlock a
          <b>Smart Door</b>and switch on a
          <b>Smart Lamp</b>. This can be done by selecting an appropriate the command
from the drop down list and pressing the
          <codeph>send</codeph>button. The stream of measurements coming from the devices can then
be seen on the same page:</p>
        <p>
          <image href="https://fiware.github.io/tutorials.Historic-Context/img/door-open.gif" scalefit="yes" scope="external">
            <alt></alt>
          </image>## Draco - Check System Health { .swagger-GET}</p>
        <codeblock outputclass="swagger-get">GET http://{{draco}}/nifi-api/system-diagnostics</codeblock>
        <p>Once Draco is running, you can check the status by making an HTTP request to the exposed draco port to
          <codeph>/nifi-api/system-diagnostics</codeph>. If the response is blank, this is usually because Draco is not running or is listening on another port.</p>
      </section>
      <section id="body-3" outputclass="section">
        <title>Body</title>
        <codeblock outputclass="markup"></codeblock>
      </section>
      <example id="example-request-3" outputclass="example">
        <title>Example Request</title>
        <codeblock outputclass="bash">curl -X GET  \
  'http://{{draco}}/nifi-api/system-diagnostics'  \
    -d ''</codeblock>
      </example>
    </body>
    <topic id="orion---subscribe-to-context-changes-1" outputclass="swagger-post" specializations="@props/deliveryTarget">
      <title>Orion - Subscribe to Context Changes</title>
      <body>
        <codeblock outputclass="swagger-post">POST http://{{orion}}/v2/subscriptions/</codeblock>
        <p>Once a dynamic context system is up and running, we need to inform
          <b>Draco</b>of changes in context.</p>
        <p>This is done by making a POST request to the
          <codeph>/v2/subscription</codeph>endpoint of the Orion Context Broker.</p>
        <ul>
          <li>The
            <codeph>fiware-service</codeph>and
            <codeph>fiware-servicepath</codeph>headers are used to filter the subscription to only listen to measurements from the attached IoT Sensors</li>
          <li>The
            <codeph>idPattern</codeph>in the request body ensures that Draco will be informed of all context data changes.</li>
          <li>The notification
            <codeph>url</codeph>must match the configured
            <codeph>NIFI_WEB_HTTP_PORT</codeph>and the URL the sync is listening on (usually
            <codeph>/v2/notify</codeph>)</li>
          <li>The
            <codeph>throttling</codeph>value defines the rate that changes are sampled.</li>
        </ul>
        <p>As you can see, the database used to persist context data has no impact on the details of the subscription. It is the same for each database.</p>
        <section id="headers-2" outputclass="section">
          <title>Headers</title>
          <table>
            <tgroup cols="3">
              <colspec colname="col1" colnum="1"></colspec>
              <colspec colname="col2" colnum="2"></colspec>
              <colspec colname="col3" colnum="3"></colspec>
              <thead>
                <row>
                  <entry align="left" colname="col1">Key</entry>
                  <entry align="left" colname="col2">Value</entry>
                  <entry align="left" colname="col3">Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry align="left" colname="col1">Content-Type</entry>
                  <entry align="left" colname="col2">application/json</entry>
                  <entry align="left" colname="col3"></entry>
                </row>
                <row>
                  <entry align="left" colname="col1">fiware-service</entry>
                  <entry align="left" colname="col2">openiot</entry>
                  <entry align="left" colname="col3"></entry>
                </row>
                <row>
                  <entry align="left" colname="col1">fiware-servicepath</entry>
                  <entry align="left" colname="col2">/</entry>
                  <entry align="left" colname="col3"></entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </section>
        <section id="body-4" outputclass="section">
          <title>Body</title>
          <codeblock outputclass="json">{
  "description": "Notify Draco of all context changes",
  "subject": {
    "entities": [
      {
        "idPattern": ".*"
      }
    ]
  },
  "notification": {
    "http": {
      "url": "http://draco:5050/v2/notify"
    }
  },
  "throttling": 5
}</codeblock>
        </section>
        <example id="example-request-4" outputclass="example">
          <title>Example Request</title>
          <codeblock outputclass="bash">curl -X POST  \
  'http://{{orion}}/v2/subscriptions/'  \
    -H Content-Type :  application/json  \
    -H fiware-service :  openiot  \
    -H fiware-servicepath :  /  \
    -d '{
  "description": "Notify Draco of all context changes",
  "subject": {
    "entities": [
      {
        "idPattern": ".*"
      }
    ]
  },
  "notification": {
    "http": {
      "url": "http://draco:5050/v2/notify"
    }
  },
  "throttling": 5
}'</codeblock>
        </example>
      </body>
    </topic>
    <topic id="orion---check-subscription-is-working-1" outputclass="swagger-get" specializations="@props/deliveryTarget">
      <title>Orion - Check Subscription is working</title>
      <body>
        <codeblock outputclass="swagger-get">GET http://{{orion}}/v2/subscriptions/</codeblock>
        <p>If a subscription has been created, you can check to see if it is firing by making a GET
request to the
          <codeph>/v2/subscriptions</codeph>endpoint.</p>
        <p>Within the
          <codeph>notification</codeph>section of the response, you can see several additional
          <codeph>attributes</codeph>which describe the health of the subscription</p>
        <p>If the criteria of the subscription have been met,
          <codeph>timesSent</codeph>should be greater than
          <codeph>0</codeph>.
A zero value would indicate that the
          <codeph>subject</codeph>of the subscription is incorrect or the subscription
has created with the wrong
          <codeph>fiware-service-path</codeph>or
          <codeph>fiware-service</codeph>header</p>
        <p>The
          <codeph>lastNotification</codeph>should be a recent timestamp - if this is not the case, then the devices
are not regularly sending data. Remember to unlock the
          <b>Smart Door</b>and switch on the
          <b>Smart Lamp</b>
        </p>
        <p>The
          <codeph>lastSuccess</codeph>should match the
          <codeph>lastNotification</codeph>date - if this is not the case
then
          <b>Draco</b>is not receiving the subscription properly. Check that the host name
and port are correct.</p>
        <p>Finally, check that the
          <codeph>status</codeph>of the subscription is
          <codeph>active</codeph>- an expired subscription
will not fire.</p>
        <section id="headers-3" outputclass="section">
          <title>Headers</title>
          <table>
            <tgroup cols="3">
              <colspec colname="col1" colnum="1"></colspec>
              <colspec colname="col2" colnum="2"></colspec>
              <colspec colname="col3" colnum="3"></colspec>
              <thead>
                <row>
                  <entry align="left" colname="col1">Key</entry>
                  <entry align="left" colname="col2">Value</entry>
                  <entry align="left" colname="col3">Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry align="left" colname="col1">fiware-service</entry>
                  <entry align="left" colname="col2">openiot</entry>
                  <entry align="left" colname="col3"></entry>
                </row>
                <row>
                  <entry align="left" colname="col1">fiware-servicepath</entry>
                  <entry align="left" colname="col2">/</entry>
                  <entry align="left" colname="col3"></entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </section>
        <section id="body-5" outputclass="section">
          <title>Body</title>
          <codeblock outputclass="markup"></codeblock>
        </section>
        <example id="example-request-5" outputclass="example">
          <title>Example Request</title>
          <codeblock outputclass="bash">curl -X GET  \
  'http://{{orion}}/v2/subscriptions/'  \
    -H fiware-service :  openiot  \
    -H fiware-servicepath :  /  \
    -d ''</codeblock>
        </example>
      </body>
    </topic>
  </topic>
  <topic id="postgresql---reading-data" specializations="@props/deliveryTarget">
    <title>PostgreSQL - Reading Data</title>
    <body>
      <p>To read PostgreSQL data from the command line, we will need access to the
        <codeph>postgres</codeph>client, to do this, run an
interactive instance of the
        <codeph>postgresql-client</codeph>image supplying the connection string as shown to obtain a command
line prompt:</p>
      <codeblock outputclass="console">docker run -it --rm  --network fiware_default jbergknoff/postgresql-client \
   postgresql://postgres:password@postgres-db:5432/postgres</codeblock>
      <section id="show-available-databases-on-the-postgresql-server" outputclass="section">
        <title>Show Available Databases on the PostgreSQL server</title>
        <p>To show the list of available databases, run the statement as shown:</p>
      </section>
      <section id="query-4" outputclass="section">
        <title>Query:</title>
        <codeblock>\list</codeblock>
      </section>
      <section id="result-4" outputclass="section">
        <title>Result:</title>
        <codeblock>Name    |  Owner   | Encoding |  Collate   |   Ctype    |   Access privileges   
-----------+----------+----------+------------+------------+-----------------------
 postgres  | postgres | UTF8     | en_US.utf8 | en_US.utf8 | 
 template0 | postgres | UTF8     | en_US.utf8 | en_US.utf8 | =c/postgres          +
           |          |          |            |            | postgres=CTc/postgres
 template1 | postgres | UTF8     | en_US.utf8 | en_US.utf8 | =c/postgres          +
           |          |          |            |            | postgres=CTc/postgres
(3 rows)</codeblock>
        <p>The result include two template databases
          <codeph>template0</codeph>and
          <codeph>template1</codeph>as well as the
          <codeph>postgres</codeph>database setup when the docker container was started.</p>
        <p>To show the list of available schemas, run the statement as shown:</p>
      </section>
      <section id="query-5" outputclass="section">
        <title>Query:</title>
        <codeblock>\dn</codeblock>
      </section>
      <section id="result-5" outputclass="section">
        <title>Result:</title>
        <codeblock>List of schemas
  Name   |  Owner   
---------+----------
 openiot | postgres
 public  | postgres
(2 rows)</codeblock>
        <p>As a result of the subscription of Draco to Orion Context Broker, a new schema has been created called
          <codeph>openiot</codeph>.
The name of the schema matches the
          <codeph>fiware-service</codeph>header - therefore
          <codeph>openiot</codeph>holds the historic context of the
IoT devices.</p>
      </section>
      <section id="read-historical-context-from-the-postgresql-server" outputclass="section">
        <title>Read Historical Context from the PostgreSQL server</title>
        <p>Once running a docker container within the network, it is possible to obtain information about the running
database.</p>
      </section>
      <section id="query-6" outputclass="section">
        <title>Query:</title>
        <codeblock outputclass="sql">SELECT table_schema,table_name
FROM information_schema.tables
WHERE table_schema ='openiot'
ORDER BY table_schema,table_name;</codeblock>
      </section>
      <section id="result-6" outputclass="section">
        <title>Result:</title>
        <codeblock>table_schema |    table_name     
--------------+-------------------
 openiot      | door_001_door
 openiot      | lamp_001_lamp
 openiot      | motion_001_motion
(3 rows)</codeblock>
        <p>The
          <codeph>table_schema</codeph>matches the
          <codeph>fiware-service</codeph>header supplied with the context data:</p>
        <p>To read the data within a table, run a select statement as shown:</p>
      </section>
      <section id="query-7" outputclass="section">
        <title>Query:</title>
        <codeblock outputclass="sql">SELECT * FROM openiot.motion_001_motion limit 10;</codeblock>
      </section>
      <section id="result-7" outputclass="section">
        <title>Result:</title>
        <codeblock>recvtimets   |         recvtime         | fiwareservicepath |  entityid  | entitytype |  attrname   |   attrtype   |        attrvalue         |                                    attrmd                                    
---------------+--------------------------+-------------------+------------+------------+-------------+--------------+--------------------------+------------------------------------------------------------------------------
 1528803005491 | 2018-06-12T11:30:05.491Z | /                 | Motion:001 | Motion     | TimeInstant | ISO8601      | 2018-06-12T11:30:05.423Z | []
 1528803005491 | 2018-06-12T11:30:05.491Z | /                 | Motion:001 | Motion     | count       | Integer      | 7                        | [{"name":"TimeInstant","type":"ISO8601","value":"2018-06-12T11:30:05.423Z"}]
 1528803005491 | 2018-06-12T11:30:05.491Z | /                 | Motion:001 | Motion     | refStore    | Relationship | Store:001                | [{"name":"TimeInstant","type":"ISO8601","value":"2018-06-12T11:30:05.423Z"}]
 1528803035501 | 2018-06-12T11:30:35.501Z | /                 | Motion:001 | Motion     | TimeInstant | ISO8601      | 2018-06-12T11:30:35.480Z | []
 1528803035501 | 2018-06-12T11:30:35.501Z | /                 | Motion:001 | Motion     | count       | Integer      | 10                       | [{"name":"TimeInstant","type":"ISO8601","value":"2018-06-12T11:30:35.480Z"}]
 1528803035501 | 2018-06-12T11:30:35.501Z | /                 | Motion:001 | Motion     | refStore    | Relationship | Store:001                | [{"name":"TimeInstant","type":"ISO8601","value":"2018-06-12T11:30:35.480Z"}]
 1528803041563 | 2018-06-12T11:30:41.563Z | /                 | Motion:001 | Motion     | TimeInstant | ISO8601      | 2018-06-12T11:30:41.520Z | []
 1528803041563 | 2018-06-12T11:30:41.563Z | /                 | Motion:001 | Motion     | count       | Integer      | 12                       | [{"name":"TimeInstant","type":"ISO8601","value":"2018-06-12T11:30:41.520Z"}]
 1528803041563 | 2018-06-12T11:30:41.563Z | /                 | Motion:001 | Motion     | refStore    | Relationship | Store:001                | [{"name":"TimeInstant","type":"ISO8601","value":"2018-06-12T11:30:41.520Z"}]
 1528803047545 | 2018-06-12T11:30:47.545Z | /</codeblock>
        <p>The usual
          <b>PostgreSQL</b>query syntax can be used to filter appropriate fields and values. For example to read the rate at which the
          <b>Motion Sensor</b>with the
          <codeph>id=Motion:001_Motion</codeph>is accumulating, you would make a query as follows:</p>
      </section>
      <section id="query-8" outputclass="section">
        <title>Query:</title>
        <codeblock outputclass="sql">SELECT recvtime, attrvalue FROM openiot.motion_001_motion WHERE attrname ='count'  limit 10;</codeblock>
      </section>
      <section id="result-8" outputclass="section">
        <title>Result:</title>
        <codeblock>recvtime         | attrvalue 
--------------------------+-----------
 2018-06-12T11:30:05.491Z | 7
 2018-06-12T11:30:35.501Z | 10
 2018-06-12T11:30:41.563Z | 12
 2018-06-12T11:30:47.545Z | 13
 2018-06-12T11:31:02.617Z | 15
 2018-06-12T11:31:32.718Z | 20
 2018-06-12T11:31:38.733Z | 22
 2018-06-12T11:31:50.780Z | 24
 2018-06-12T11:31:56.825Z | 25
 2018-06-12T11:31:59.790Z | 26
(10 rows)</codeblock>
        <p>To leave the Postgres client and leave interactive mode, run the following:</p>
        <codeblock outputclass="console">\q</codeblock>
        <p>You will then return to the commmand line.</p>
      </section>
    </body>
  </topic>
  <topic id="mysql---persisting-context" specializations="@props/deliveryTarget">
    <title>MySQL - Persisting Context</title>
    <body>
      <p>Similarly, to persisting historic context data into
        <b>MySQL</b>, we will again need an additional container which hosts
the MySQL server, once again the default Docker image for this data can be used. The MySQL instance is listening on the
standard
        <codeph>3306</codeph>port and the overall architecture can be seen below:</p>
      <fig>
        <title></title>
        <image href="https://fiware.github.io/tutorials.Historic-Context-NIFI/img/mysql-draco-tutorial.png" scalefit="yes" scope="external">
          <alt></alt>
        </image>
      </fig>
      <p>Once again we have a system with two databases, since the MongoDB container is still required to hold data related to
the Orion Context Broker and the IoT Agent.</p>
      <section id="mysql---database-server-configuration" outputclass="section">
        <title>MySQL - Database Server Configuration</title>
        <codeblock outputclass="yaml">mysql-db:
    restart: always
    image: mysql:5.7
    hostname: mysql-db
    container_name: db-mysql
    expose:
        - "3306"
    ports:
        - "3306:3306"
    networks:
        - default
    environment:
        - "MYSQL_ROOT_PASSWORD=123"
        - "MYSQL_ROOT_HOST=%"</codeblock>
        <p>:information_source:
          <b>Note:</b>Using the default
          <codeph>root</codeph>user and displaying the password in an environment variables
like this is a security risk. Whereas this is acceptable practice in a tutorial, for a production environment, you can
avoid this risk by setting up another user and applying
          <xref format="html" href="https://blog.docker.com/2017/02/docker-secrets-management/" scope="external">Docker Secrets</xref>
        </p>
        <p>The
          <codeph>mysql-db</codeph>container is listening on a single port:</p>
        <ul>
          <li>Port
            <codeph>3306</codeph>is the default port for a MySQL server. It has been exposed so you can also run other database tools to
display data if you wish</li>
        </ul>
        <p>The
          <codeph>mysql-db</codeph>container is driven by environment variables as shown:</p>
        <table>
          <tgroup cols="3">
            <colspec colname="col1" colnum="1" colwidth="8%"></colspec>
            <colspec colname="col2" colnum="2" colwidth="4%"></colspec>
            <colspec colname="col3" colnum="3" colwidth="87%"></colspec>
            <thead>
              <row>
                <entry align="left" colname="col1">Key</entry>
                <entry align="left" colname="col2">Value.</entry>
                <entry align="left" colname="col3">Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry align="left" colname="col1">MYSQL_ROOT_PASSWORD</entry>
                <entry align="left" colname="col2">
                  <codeph>123</codeph>.</entry>
                <entry align="left" colname="col3">specifies a password that is set for the MySQL
                  <codeph>root</codeph>account.</entry>
              </row>
              <row>
                <entry align="left" colname="col1">MYSQL_ROOT_HOST</entry>
                <entry align="left" colname="col2">
                  <codeph>postgres</codeph>
                </entry>
                <entry align="left" colname="col3">By default, MySQL creates the
                  <codeph>root'@'localhost</codeph>account. This account can only be connected to from inside the container. Setting this environment variable allows root connections from other hosts</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </section>
      <section id="mysql---draco-configuration" outputclass="section">
        <title>MySQL - Draco Configuration</title>
        <codeblock outputclass="yaml">draco:
    image: ging/fiware-draco:1.1.0
    container_name: draco
    depends_on:
        - mysql-db
    environment:
        - NIFI_WEB_HTTP_PORT=9090
    ports:
        - "9090:9090"
        - "5050:5050"
    healthcheck:
        test: curl --fail -s http://localhost:9090/nifi-api/system-diagnostics || exit 1</codeblock>
        <p>The
          <codeph>draco</codeph>container is listening on two ports:</p>
        <ul>
          <li>The Subscription Port for Draco -
            <codeph>5050</codeph>is where the service will be listening for notifications from the Orion
context broker</li>
          <li>The Web interface for Draco -
            <codeph>9090</codeph>is exposed purely for configuring the processors</li>
        </ul>
      </section>
      <section id="mysql---start-up" outputclass="section">
        <title>MySQL - Start up</title>
        <p>To start the system with a
          <b>MySQL</b>database run the following command:</p>
        <codeblock outputclass="console">./services mysql</codeblock>
        <p>Then go to your browser and open Draco using this URL
          <codeph>http://localhost:9090/nifi</codeph>
        </p>
        <p>Now go to the Components toolbar which is placed in the upper section of the NiFi GUI, find the template icon and drag
and drop it inside the Draco user space. At this point, a popup should be displayed with a list of all the templates
available. Please select the template MYSQL-TUTORIAL.</p>
        <fig>
          <title></title>
          <image href="https://fiware.github.io/tutorials.Historic-Context-NIFI/img/draco-template1.png" scalefit="yes" scope="external">
            <alt></alt>
          </image>
        </fig>
        <p>Before starting the processors, you need to set your MySQL password and enable the DBCConnectionPool controller. For
doing that please follow the instructions:</p>
        <ol>
          <li>
            <p>Do right click on any part of the Draco GUI user space, and then click on configure.
              <image href="https://fiware.github.io/tutorials.Historic-Context-NIFI/img/step1.png" scalefit="yes" scope="external">
                <alt></alt>
              </image>
            </p>
          </li>
          <li>
            <p>Go to the Controller Services Tab, at this point a list of controllers should be displayed, locate the
DBCConnectionPool controller.</p>
          </li>
          <li>
            <p>Click on the configuration button of the "DBCPConnectionPool"
              <image href="https://fiware.github.io/tutorials.Historic-Context-NIFI/img/step2.png" scalefit="yes" scope="external">
                <alt></alt>
              </image>
            </p>
          </li>
          <li>
            <p>Go to the controller Properties tab and put "123" in the password field, then apply the changes.
              <image href="https://fiware.github.io/tutorials.Historic-Context-NIFI/img/step3.png" scalefit="yes" scope="external">
                <alt></alt>
              </image>
            </p>
          </li>
          <li>
            <p>Enable the processor by clicking on the thunder icon and then click on enable, then close the controller
configuration page.
              <image href="https://fiware.github.io/tutorials.Historic-Context-NIFI/img/step4.png" scalefit="yes" scope="external">
                <alt></alt>
              </image>
            </p>
          </li>
        </ol>
        <fig>
          <title></title>
          <image href="https://fiware.github.io/tutorials.Historic-Context-NIFI/img/step5.png" scalefit="yes" scope="external">
            <alt></alt>
          </image>
        </fig>
        <ol>
          <li>Select all the processors (press shift and click on every processor) and start them by clicking on the start button.
Now, you can see that the status icon of each processor turned from red to green.</li>
        </ol>
      </section>
      <section id="generating-context-data-2" outputclass="section">
        <title>Generating Context Data</title>
        <p>For the purpose of this tutorial, we must be monitoring a system where the context is periodically being updated.
The dummy IoT Sensors can be used to do this. Open the device monitor page at
          <codeph>http://localhost:3000/device/monitor</codeph>and unlock a
          <b>Smart Door</b>and switch on a
          <b>Smart Lamp</b>. This can be done by selecting an appropriate the command
from the drop down list and pressing the
          <codeph>send</codeph>button. The stream of measurements coming from the devices can then
be seen on the same page:</p>
        <p>
          <image href="https://fiware.github.io/tutorials.Historic-Context/img/door-open.gif" scalefit="yes" scope="external">
            <alt></alt>
          </image>## Draco - Check System Health { .swagger-GET}</p>
        <codeblock outputclass="swagger-get">GET http://{{draco}}/nifi-api/system-diagnostics</codeblock>
        <p>Once Draco is running, you can check the status by making an HTTP request to the exposed draco port to
          <codeph>/nifi-api/system-diagnostics</codeph>. If the response is blank, this is usually because Draco is not running or is listening on another port.</p>
      </section>
      <section id="body-6" outputclass="section">
        <title>Body</title>
        <codeblock outputclass="markup"></codeblock>
      </section>
      <example id="example-request-6" outputclass="example">
        <title>Example Request</title>
        <codeblock outputclass="bash">curl -X GET  \
  'http://{{draco}}/nifi-api/system-diagnostics'  \
    -d ''</codeblock>
      </example>
    </body>
    <topic id="orion---subscribe-to-context-changes-2" outputclass="swagger-post" specializations="@props/deliveryTarget">
      <title>Orion - Subscribe to Context Changes</title>
      <body>
        <codeblock outputclass="swagger-post">POST http://{{orion}}/v2/subscriptions/</codeblock>
        <p>Once a dynamic context system is up and running, we need to inform
          <b>Draco</b>of changes in context.</p>
        <p>This is done by making a POST request to the
          <codeph>/v2/subscription</codeph>endpoint of the Orion Context Broker.</p>
        <ul>
          <li>The
            <codeph>fiware-service</codeph>and
            <codeph>fiware-servicepath</codeph>headers are used to filter the subscription to only listen to measurements from the attached IoT Sensors</li>
          <li>The
            <codeph>idPattern</codeph>in the request body ensures that Draco will be informed of all context data changes.</li>
          <li>The notification
            <codeph>url</codeph>must match the configured
            <codeph>NIFI_WEB_HTTP_PORT</codeph>and the URL the sync is listening on (usually
            <codeph>/v2/notify</codeph>)</li>
          <li>The
            <codeph>throttling</codeph>value defines the rate that changes are sampled.</li>
        </ul>
        <p>As you can see, the database used to persist context data has no impact on the details of the subscription. It is the same for each database.</p>
        <section id="headers-4" outputclass="section">
          <title>Headers</title>
          <table>
            <tgroup cols="3">
              <colspec colname="col1" colnum="1"></colspec>
              <colspec colname="col2" colnum="2"></colspec>
              <colspec colname="col3" colnum="3"></colspec>
              <thead>
                <row>
                  <entry align="left" colname="col1">Key</entry>
                  <entry align="left" colname="col2">Value</entry>
                  <entry align="left" colname="col3">Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry align="left" colname="col1">Content-Type</entry>
                  <entry align="left" colname="col2">application/json</entry>
                  <entry align="left" colname="col3"></entry>
                </row>
                <row>
                  <entry align="left" colname="col1">fiware-service</entry>
                  <entry align="left" colname="col2">openiot</entry>
                  <entry align="left" colname="col3"></entry>
                </row>
                <row>
                  <entry align="left" colname="col1">fiware-servicepath</entry>
                  <entry align="left" colname="col2">/</entry>
                  <entry align="left" colname="col3"></entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </section>
        <section id="body-7" outputclass="section">
          <title>Body</title>
          <codeblock outputclass="json">{
  "description": "Notify Draco of all context changes",
  "subject": {
    "entities": [
      {
        "idPattern": ".*"
      }
    ]
  },
  "notification": {
    "http": {
      "url": "http://draco:5050/v2/notify"
    }
  },
  "throttling": 5
}</codeblock>
        </section>
        <example id="example-request-7" outputclass="example">
          <title>Example Request</title>
          <codeblock outputclass="bash">curl -X POST  \
  'http://{{orion}}/v2/subscriptions/'  \
    -H Content-Type :  application/json  \
    -H fiware-service :  openiot  \
    -H fiware-servicepath :  /  \
    -d '{
  "description": "Notify Draco of all context changes",
  "subject": {
    "entities": [
      {
        "idPattern": ".*"
      }
    ]
  },
  "notification": {
    "http": {
      "url": "http://draco:5050/v2/notify"
    }
  },
  "throttling": 5
}'</codeblock>
        </example>
      </body>
    </topic>
    <topic id="orion---check-subscription-is-working-2" outputclass="swagger-get" specializations="@props/deliveryTarget">
      <title>Orion - Check Subscription is working</title>
      <body>
        <codeblock outputclass="swagger-get">GET http://{{orion}}/v2/subscriptions/</codeblock>
        <p>If a subscription has been created, you can check to see if it is firing by making a GET
request to the
          <codeph>/v2/subscriptions</codeph>endpoint.</p>
        <p>Within the
          <codeph>notification</codeph>section of the response, you can see several additional
          <codeph>attributes</codeph>which describe the health of the subscription</p>
        <p>If the criteria of the subscription have been met,
          <codeph>timesSent</codeph>should be greater than
          <codeph>0</codeph>.
A zero value would indicate that the
          <codeph>subject</codeph>of the subscription is incorrect or the subscription
has created with the wrong
          <codeph>fiware-service-path</codeph>or
          <codeph>fiware-service</codeph>header</p>
        <p>The
          <codeph>lastNotification</codeph>should be a recent timestamp - if this is not the case, then the devices
are not regularly sending data. Remember to unlock the
          <b>Smart Door</b>and switch on the
          <b>Smart Lamp</b>
        </p>
        <p>The
          <codeph>lastSuccess</codeph>should match the
          <codeph>lastNotification</codeph>date - if this is not the case
then
          <b>Draco</b>is not receiving the subscription properly. Check that the host name
and port are correct.</p>
        <p>Finally, check that the
          <codeph>status</codeph>of the subscription is
          <codeph>active</codeph>- an expired subscription
will not fire.</p>
        <section id="headers-5" outputclass="section">
          <title>Headers</title>
          <table>
            <tgroup cols="3">
              <colspec colname="col1" colnum="1"></colspec>
              <colspec colname="col2" colnum="2"></colspec>
              <colspec colname="col3" colnum="3"></colspec>
              <thead>
                <row>
                  <entry align="left" colname="col1">Key</entry>
                  <entry align="left" colname="col2">Value</entry>
                  <entry align="left" colname="col3">Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry align="left" colname="col1">fiware-service</entry>
                  <entry align="left" colname="col2">openiot</entry>
                  <entry align="left" colname="col3"></entry>
                </row>
                <row>
                  <entry align="left" colname="col1">fiware-servicepath</entry>
                  <entry align="left" colname="col2">/</entry>
                  <entry align="left" colname="col3"></entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </section>
        <section id="body-8" outputclass="section">
          <title>Body</title>
          <codeblock outputclass="markup"></codeblock>
        </section>
        <example id="example-request-8" outputclass="example">
          <title>Example Request</title>
          <codeblock outputclass="bash">curl -X GET  \
  'http://{{orion}}/v2/subscriptions/'  \
    -H fiware-service :  openiot  \
    -H fiware-servicepath :  /  \
    -d ''</codeblock>
        </example>
      </body>
    </topic>
  </topic>
  <topic id="mysql---reading-data" specializations="@props/deliveryTarget">
    <title>MySQL - Reading Data</title>
    <body>
      <p>To read MySQL data from the command line, we will need access to the
        <codeph>mysql</codeph>client, to do this, run an
interactive instance of the
        <codeph>mysql</codeph>image supplying the connection string as shown to obtain a command
line prompt:</p>
      <codeblock outputclass="console">docker exec -it  db-mysql mysql -h mysql-db -P 3306  -u root -p123</codeblock>
      <section id="show-available-databases-on-the-mysql-server" outputclass="section">
        <title>Show Available Databases on the MySQL server</title>
        <p>To show the list of available databases, run the statement as shown:</p>
      </section>
      <section id="query-9" outputclass="section">
        <title>Query:</title>
        <codeblock outputclass="sql">SHOW DATABASES;</codeblock>
      </section>
      <section id="result-9" outputclass="section">
        <title>Result:</title>
        <codeblock>+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| openiot            |
| performance_schema |
| sys                |
+--------------------+
5 rows in set (0.00 sec)</codeblock>
        <p>To show the list of available schemas, run the statement as shown:</p>
      </section>
      <section id="query-10" outputclass="section">
        <title>Query:</title>
        <codeblock outputclass="sql">SHOW SCHEMAS;</codeblock>
      </section>
      <section id="result-10" outputclass="section">
        <title>Result:</title>
        <codeblock>+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| openiot            |
| performance_schema |
| sys                |
+--------------------+
5 rows in set (0.00 sec)</codeblock>
        <p>As a result of the subscription of Draco to Orion Context Broker, a new schema has been created called
          <codeph>openiot</codeph>.
The name of the schema matches the
          <codeph>fiware-service</codeph>header - therefore
          <codeph>openiot</codeph>holds the historic context of the
IoT devices.</p>
      </section>
      <section id="read-historical-context-from-the-postgresql-server-1" outputclass="section">
        <title>Read Historical Context from the PostgreSQL server</title>
        <p>Once running a docker container within the network, it is possible to obtain information about the running
database.</p>
      </section>
      <section id="query-11" outputclass="section">
        <title>Query:</title>
        <codeblock outputclass="sql">SHOW tables FROM openiot;</codeblock>
      </section>
      <section id="result-11" outputclass="section">
        <title>Result:</title>
        <codeblock>table_schema |    table_name     
--------------+-------------------
 openiot      | door_001_door
 openiot      | lamp_001_lamp
 openiot      | motion_001_motion
(3 rows)</codeblock>
        <p>The
          <codeph>table_schema</codeph>matches the
          <codeph>fiware-service</codeph>header supplied with the context data:</p>
        <p>To read the data within a table, run a select statement as shown:</p>
      </section>
      <section id="query-12" outputclass="section">
        <title>Query:</title>
        <codeblock outputclass="sql">SELECT * FROM openiot.Motion_001_Motion limit 10;</codeblock>
      </section>
      <section id="result-12" outputclass="section">
        <title>Result:</title>
        <codeblock>+---------------+-------------------------+-------------------+------------+------------+-------------+--------------+--------------------------+------------------------------------------------------------------------------+
| recvTimeTs    | recvTime                | fiwareServicePath | entityId   | entityType | attrName    | attrType     | attrValue                | attrMd                                                                       |
+---------------+-------------------------+-------------------+------------+------------+-------------+--------------+--------------------------+------------------------------------------------------------------------------+
| 1528804397955 | 2018-06-12T11:53:17.955 | /                 | Motion:001 | Motion     | TimeInstant | ISO8601      | 2018-06-12T11:53:17.923Z | []                                                                           |
| 1528804397955 | 2018-06-12T11:53:17.955 | /                 | Motion:001 | Motion     | count       | Integer      | 3                        | [{"name":"TimeInstant","type":"ISO8601","value":"2018-06-12T11:53:17.923Z"}] |
| 1528804397955 | 2018-06-12T11:53:17.955 | /                 | Motion:001 | Motion     | refStore    | Relationship | Store:001                | [{"name":"TimeInstant","type":"ISO8601","value":"2018-06-12T11:53:17.923Z"}] |
| 1528804403954 | 2018-06-12T11:53:23.954 | /                 | Motion:001 | Motion     | TimeInstant | ISO8601      | 2018-06-12T11:53:23.928Z | []                                                                           |
| 1528804403954 | 2018-06-12T11:53:23.954 | /                 | Motion:001 | Motion     | count       | Integer      | 5                        | [{"name":"TimeInstant","type":"ISO8601","value":"2018-06-12T11:53:23.928Z"}] |
| 1528804403954 | 2018-06-12T11:53:23.954 | /                 | Motion:001 | Motion     | refStore    | Relationship | Store:001                | [{"name":"TimeInstant","type":"ISO8601","value":"2018-06-12T11:53:23.928Z"}] |
| 1528804409970 | 2018-06-12T11:53:29.970 | /                 | Motion:001 | Motion     | TimeInstant | ISO8601      | 2018-06-12T11:53:29.948Z | []                                                                           |
| 1528804409970 | 2018-06-12T11:53:29.970 | /                 | Motion:001 | Motion     | count       | Integer      | 7                        | [{"name":"TimeInstant","type":"ISO8601","value":"2018-06-12T11:53:29.948Z"}] |
| 1528804409970 | 2018-06-12T11:53:29.970 | /                 | Motion:001 | Motion     | refStore    | Relationship | Store:001                | [{"name":"TimeInstant","type":"ISO8601","value":"2018-06-12T11:53:29.948Z"}] |
| 1528804446083 | 2018-06-12T11:54:06.83  | /                 | Motion:001 | Motion     | TimeInstant | ISO8601      | 2018-06-12T11:54:06.062Z | []                                                                           |
+---------------+-------------------------+-------------------+------------+------------+-------------+--------------+--------------------------+------------------------------------------------------------------------------+</codeblock>
        <p>The usual
          <b>MySQL</b>query syntax can be used to filter appropriate fields and values. For example to read the rate at which the
          <b>Motion Sensor</b>with the
          <codeph>id=Motion:001_Motion</codeph>is accumulating, you would make a query as follows:</p>
      </section>
      <section id="query-13" outputclass="section">
        <title>Query:</title>
        <codeblock outputclass="sql">SELECT recvtime, attrvalue FROM openiot.Motion_001_Motion WHERE attrname ='count' LIMIT 10;</codeblock>
      </section>
      <section id="result-13" outputclass="section">
        <title>Result:</title>
        <codeblock>+-------------------------+-----------+
| recvtime                | attrvalue |
+-------------------------+-----------+
| 2018-06-12T11:53:17.955 | 3         |
| 2018-06-12T11:53:23.954 | 5         |
| 2018-06-12T11:53:29.970 | 7         |
| 2018-06-12T11:54:06.83  | 12        |
| 2018-06-12T11:54:12.132 | 13        |
| 2018-06-12T11:54:24.177 | 14        |
| 2018-06-12T11:54:36.196 | 16        |
| 2018-06-12T11:54:42.195 | 18        |
| 2018-06-12T11:55:24.300 | 23        |
| 2018-06-12T11:55:30.350 | 25        |
+-------------------------+-----------+
10 rows in set (0.00 sec)</codeblock>
        <p>To leave the MySQL client and leave interactive mode, run the following:</p>
        <codeblock outputclass="console">\q</codeblock>
        <p>You will then return to the commmand line.</p>
      </section>
    </body>
  </topic>
  <topic id="multi-agent-persisting-to-multiple-databases" specializations="@props/deliveryTarget">
    <title>Multi-Agent Persisting to Multiple Databases</title>
    <body>
      <p>It is also possible to configure Draco to populate multiple databases simultaneously. We can combine the architecture
from the three previous examples and configure Draco to store data in multiple sinks.</p>
      <fig>
        <title></title>
        <image href="https://fiware.github.io/tutorials.Historic-Context-NIFI/img/multiple-draco-tutorial.png" scalefit="yes" scope="external">
          <alt></alt>
        </image>
      </fig>
      <p>We now have a system with three databases, PostgreSQL and MySQL for data persistence and MongoDB for both data
persistence and holding data related to the Orion Context Broker and the IoT Agent.</p>
      <section id="multi-agent---draco-configuration-for-multiple-databases" outputclass="section">
        <title>Multi-Agent - Draco Configuration for Multiple Databases</title>
        <codeblock outputclass="yaml">draco:
    image: ging/fiware-draco:1.1.0
    container_name: draco
    depends_on:
        - mysql-db
        - mongo-db
        - postgres-db
    environment:
        - NIFI_WEB_HTTP_PORT=9090
    ports:
        - "9090:9090"
        - "5050:5050"
    healthcheck:
        test: curl --fail -s http://localhost:9090/nifi-api/system-diagnostics || exit 1</codeblock>
        <p>The
          <codeph>draco</codeph>container is listening on two ports:</p>
        <ul>
          <li>The Subscription Port for Draco -
            <codeph>5050</codeph>is where the service will be listening for notifications from the Orion
context broker</li>
          <li>The Web interface for Draco -
            <codeph>9090</codeph>is exposed purely for configuring the processors</li>
        </ul>
      </section>
      <section id="multi-agent---start-up" outputclass="section">
        <title>Multi-Agent - Start up</title>
        <p>To start the system with
          <b>multiple</b>databases run the following command:</p>
        <codeblock outputclass="console">./services multiple</codeblock>
        <p>Then go to your browser and open Draco using this URL
          <codeph>http://localhost:9090/nifi</codeph>
        </p>
        <p>Now go to the Components toolbar which is placed in the upper section of the NiFi GUI, find the template icon and drag
and drop it inside the Draco user space. At this point, a popup should be displayed with a list of all the templates
available. Please select the template MULTIPLE-SINKS-TUTORIAL.</p>
        <fig>
          <title></title>
          <image href="https://fiware.github.io/tutorials.Historic-Context-NIFI/img/multiple-tutorial-template.png" scalefit="yes" scope="external">
            <alt></alt>
          </image>
        </fig>
        <p>Now repeat the process for setting the password in the controller "DBCPConnectionPool" each connection MySQL and
PostgreSQL</p>
        <p>Select all the processors (press shift and click on every processor) and start them by clicking on the start button.
Now, you can see that the status icon of each processor turned from red to green.</p>
      </section>
      <section id="generating-context-data-3" outputclass="section">
        <title>Generating Context Data</title>
        <p>For the purpose of this tutorial, we must be monitoring a system where the context is periodically being updated.
The dummy IoT Sensors can be used to do this. Open the device monitor page at
          <codeph>http://localhost:3000/device/monitor</codeph>and unlock a
          <b>Smart Door</b>and switch on a
          <b>Smart Lamp</b>. This can be done by selecting an appropriate the command
from the drop down list and pressing the
          <codeph>send</codeph>button. The stream of measurements coming from the devices can then
be seen on the same page:</p>
        <p>
          <image href="https://fiware.github.io/tutorials.Historic-Context/img/door-open.gif" scalefit="yes" scope="external">
            <alt></alt>
          </image>## Draco - Obtain version information { .swagger-GET}</p>
        <codeblock outputclass="swagger-get">GET http://{{draco}}/v1/version</codeblock>
        <p>Once Draco is running, You can check the status by making an HTTP request to the exposed
          <codeph>CYGNUS_API_PORT</codeph>port.
If the response is blank, this is usually because Draco is not running or is listening on another port.</p>
        <p>
          <b>Troubleshooting:</b>What if the response is blank ?</p>
        <ul>
          <li>To check that a docker container is running try</li>
        </ul>
        <codeblock outputclass="bash">docker ps</codeblock>
        <p>You should see several containers running. If
          <codeph>draco</codeph>is not running, you can restart the containers as necessary.</p>
      </section>
      <section id="body-9" outputclass="section">
        <title>Body</title>
        <codeblock outputclass="markup"></codeblock>
      </section>
      <example id="example-request-9" outputclass="example">
        <title>Example Request</title>
        <codeblock outputclass="bash">curl -X GET  \
  'http://{{draco}}/v1/version'  \
    -d ''</codeblock>
      </example>
    </body>
    <topic id="orion---subscribe-to-context-changes-3" outputclass="swagger-post" specializations="@props/deliveryTarget">
      <title>Orion - Subscribe to Context Changes</title>
      <body>
        <codeblock outputclass="swagger-post">POST http://{{orion}}/v2/subscriptions/</codeblock>
        <p>Once a dynamic context system is up and running, we need to inform
          <b>Draco</b>of changes in context.</p>
        <p>This is done by making a POST request to the
          <codeph>/v2/subscription</codeph>endpoint of the Orion Context Broker.</p>
        <ul>
          <li>The
            <codeph>fiware-service</codeph>and
            <codeph>fiware-servicepath</codeph>headers are used to filter the subscription to only listen to measurements from the attached IoT Sensors</li>
          <li>The
            <codeph>idPattern</codeph>in the request body ensures that Draco will be informed of all context data changes.</li>
          <li>The
            <codeph>attrsFormat=legacy</codeph>is required since Draco currently only accepts notifications in the older NGSI v1 format.</li>
          <li>The
            <codeph>throttling</codeph>value defines the rate that changes are sampled.</li>
        </ul>
        <p>When running in
          <b>multi-agent</b>mode, the notification
          <codeph>url</codeph>for each subscription must match the defaults for the given database.</p>
        <p>The default port mapping can be seen below:</p>
        <table>
          <tgroup cols="2">
            <colspec colname="col1" colnum="1"></colspec>
            <colspec colname="col2" colnum="2"></colspec>
            <thead>
              <row>
                <entry align="right" colname="col1">sink</entry>
                <entry align="right" colname="col2">port</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry align="right" colname="col1">mysql</entry>
                <entry align="right" colname="col2">5050</entry>
              </row>
              <row>
                <entry align="right" colname="col1">mongo</entry>
                <entry align="right" colname="col2">5051</entry>
              </row>
              <row>
                <entry align="right" colname="col1">ckan</entry>
                <entry align="right" colname="col2">5052</entry>
              </row>
              <row>
                <entry align="right" colname="col1">hdfs</entry>
                <entry align="right" colname="col2">5053</entry>
              </row>
              <row>
                <entry align="right" colname="col1">postgresql</entry>
                <entry align="right" colname="col2">5054</entry>
              </row>
              <row>
                <entry align="right" colname="col1">cartodb</entry>
                <entry align="right" colname="col2">5055</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <p>Since this subscription is using port
          <codeph>5050</codeph>the context data will eventually be persisted to the
          <i>MySQL</i>database.</p>
        <section id="headers-6" outputclass="section">
          <title>Headers</title>
          <table>
            <tgroup cols="3">
              <colspec colname="col1" colnum="1"></colspec>
              <colspec colname="col2" colnum="2"></colspec>
              <colspec colname="col3" colnum="3"></colspec>
              <thead>
                <row>
                  <entry align="left" colname="col1">Key</entry>
                  <entry align="left" colname="col2">Value</entry>
                  <entry align="left" colname="col3">Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry align="left" colname="col1">Content-Type</entry>
                  <entry align="left" colname="col2">application/json</entry>
                  <entry align="left" colname="col3"></entry>
                </row>
                <row>
                  <entry align="left" colname="col1">fiware-service</entry>
                  <entry align="left" colname="col2">openiot</entry>
                  <entry align="left" colname="col3"></entry>
                </row>
                <row>
                  <entry align="left" colname="col1">fiware-servicepath</entry>
                  <entry align="left" colname="col2">/</entry>
                  <entry align="left" colname="col3"></entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </section>
        <section id="body-10" outputclass="section">
          <title>Body</title>
          <codeblock outputclass="json">{
  "description": "Notify Draco of all context changes for MySQL on port 5050",
  "subject": {
    "entities": [
      {
        "idPattern": ".*"
      }
    ]
  },
  "notification": {
    "http": {
      "url": "http://draco:5050/notify"
    },
    "attrsFormat": "legacy"
  },
  "throttling": 5
}</codeblock>
        </section>
        <example id="example-request-10" outputclass="example">
          <title>Example Request</title>
          <codeblock outputclass="bash">curl -X POST  \
  'http://{{orion}}/v2/subscriptions/'  \
    -H Content-Type :  application/json  \
    -H fiware-service :  openiot  \
    -H fiware-servicepath :  /  \
    -d '{
  "description": "Notify Draco of all context changes for MySQL on port 5050",
  "subject": {
    "entities": [
      {
        "idPattern": ".*"
      }
    ]
  },
  "notification": {
    "http": {
      "url": "http://draco:5050/notify"
    },
    "attrsFormat": "legacy"
  },
  "throttling": 5
}'</codeblock>
        </example>
      </body>
    </topic>
    <topic id="orion---check-subscription-is-working-3" outputclass="swagger-get" specializations="@props/deliveryTarget">
      <title>Orion - Check Subscription is working</title>
      <body>
        <codeblock outputclass="swagger-get">GET http://{{orion}}/v2/subscriptions/</codeblock>
        <p>If a subscription has been created, you can check to see if it is firing by making a GET
request to the
          <codeph>/v2/subscriptions</codeph>endpoint.</p>
        <p>Within the
          <codeph>notification</codeph>section of the response, you can see several additional
          <codeph>attributes</codeph>which describe the health of the subscription</p>
        <p>If the criteria of the subscription have been met,
          <codeph>timesSent</codeph>should be greater than
          <codeph>0</codeph>.
A zero value would indicate that the
          <codeph>subject</codeph>of the subscription is incorrect or the subscription
has created with the wrong
          <codeph>fiware-service-path</codeph>or
          <codeph>fiware-service</codeph>header</p>
        <p>The
          <codeph>lastNotification</codeph>should be a recent timestamp - if this is not the case, then the devices
are not regularly sending data. Remember to unlock the
          <b>Smart Door</b>and switch on the
          <b>Smart Lamp</b>
        </p>
        <p>The
          <codeph>lastSuccess</codeph>should match the
          <codeph>lastNotification</codeph>date - if this is not the case
then
          <b>Draco</b>is not receiving the subscription properly. Check that the host name
and port are correct.</p>
        <p>Finally, check that the
          <codeph>status</codeph>of the subscription is
          <codeph>active</codeph>- an expired subscription
will not fire.</p>
        <section id="headers-7" outputclass="section">
          <title>Headers</title>
          <table>
            <tgroup cols="3">
              <colspec colname="col1" colnum="1"></colspec>
              <colspec colname="col2" colnum="2"></colspec>
              <colspec colname="col3" colnum="3"></colspec>
              <thead>
                <row>
                  <entry align="left" colname="col1">Key</entry>
                  <entry align="left" colname="col2">Value</entry>
                  <entry align="left" colname="col3">Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry align="left" colname="col1">fiware-service</entry>
                  <entry align="left" colname="col2">openiot</entry>
                  <entry align="left" colname="col3"></entry>
                </row>
                <row>
                  <entry align="left" colname="col1">fiware-servicepath</entry>
                  <entry align="left" colname="col2">/</entry>
                  <entry align="left" colname="col3"></entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </section>
        <section id="body-11" outputclass="section">
          <title>Body</title>
          <codeblock outputclass="markup"></codeblock>
        </section>
        <example id="example-request-11" outputclass="example">
          <title>Example Request</title>
          <codeblock outputclass="bash">curl -X GET  \
  'http://{{orion}}/v2/subscriptions/'  \
    -H fiware-service :  openiot  \
    -H fiware-servicepath :  /  \
    -d ''</codeblock>
        </example>
      </body>
    </topic>
  </topic>
</topic>

